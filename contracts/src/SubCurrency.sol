pragma solidity ^0.4.17;

/*
*  About: Contract that implements simplest form of Cryptocurrency that generates
*    coins out of thin air. Issuance scheme prevents generation of coins by anyone
*    other than creator of the Contract. Anyone may send coins to each other with
*    only an Ethereum keypair required.
*/
contract SubCurrency {
    /// Generates function `minter()` allowing state variable value to be readable from outside by other contracts.
    address public minter;

    /// Getter function `balances(address)` to check an account balance from outside by other contracts 
    /// is generated by use of the `public` keyword. Maps 
    mapping (address => uint) public balances;

    /// Middleware listens for this event to fire on the blockchain with minimal cost when `sendSubCurrency` called.
    /// Listener receives arguments `from`, `to`, `amount` when "event" fired to help track transactions.
    event SentSubCurrency(address from, address to, uint amount);

    event TransferredSubCurrency(address from, address to, uint amount);

    // Constructor run only when contract created to generate minter initial account balance
    function SubCurrency() public {
        minter = msg.sender;
        balances[tx.origin] = 1000;
    }

    function sendSubCurrency(address receiver, uint amount) public returns (bool success) {
        if (balances[msg.sender] < amount) {
            return false;
        }
        balances[msg.sender] -= amount;
        balances[receiver] += amount;
        SentSubCurrency(msg.sender, receiver, amount);
        return true;
    }

    function transferSubCurrency(address sender, address receiver, uint amount) public returns (bool success) {
        if (balances[sender] < amount) {
            return false;
        }
        balances[sender] -= amount;
        balances[receiver] += amount;
        TransferredSubCurrency(sender, receiver, amount);
        return true;
    }

    function getBalance (address user) public constant returns (uint balance) {
        return balances[user];
    }

    /// Fallback Function
    function() public {}
}